(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{527:function(e,t,n){"use strict";n.r(t);var s=n(17),o=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"transferring-a-file-with-ipfs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#transferring-a-file-with-ipfs"}},[e._v("#")]),e._v(" Transferring a file with ipfs")]),e._v(" "),n("p",[e._v("This guide helps you troubleshoot file transfers between two IPFS nodes.")]),e._v(" "),n("h2",{attrs:{id:"a-file-transfer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-file-transfer"}},[e._v("#")]),e._v(" A file transfer")]),e._v(" "),n("p",[e._v("To start, make sure that ipfs is running on both machines. To verify, run "),n("code",[e._v("ipfs id")]),e._v(" on each machine and check if the "),n("code",[e._v("Addresses")]),e._v(" field has anything in it. If"),n("br"),e._v("\nit says "),n("code",[e._v("null")]),e._v(", then your node is not online and you will need to run "),n("code",[e._v("ipfs daemon")]),e._v(".")]),e._v(" "),n("p",[e._v("Now, lets call the node with the file you want to transfer node 'A' and the"),n("br"),e._v("\nnode you want to get the file to node 'B'. On node A, add the file to ipfs"),n("br"),e._v("\nusing the "),n("code",[e._v("ipfs add")]),e._v(" command. This will print out the multihash of the content"),n("br"),e._v("\nyou added. Now, on node B, you can fetch the content using "),n("code",[e._v("ipfs get <hash>")]),e._v(".")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# On A\n> ipfs add myfile.txt\nadded QmZJ1xT1T9KYkHhgRhbv8D7mYrbemaXwYUkg7CeHdrk1Ye myfile.txt\n\n# On B\n> ipfs get QmZJ1xT1T9KYkHhgRhbv8D7mYrbemaXwYUkg7CeHdrk1Ye\nSaving file(s) to QmZJ1xT1T9KYkHhgRhbv8D7mYrbemaXwYUkg7CeHdrk1Ye\n 13 B / 13 B [=====================================================] 100.00% 1s\n")])])]),n("p",[e._v("If that worked, and downloaded the file, then congratulations! You just used"),n("br"),e._v("\nipfs to move files across the internet! But, if that "),n("code",[e._v("ipfs get")]),e._v(" command is"),n("br"),e._v("\nhanging, with no output, read onwards.")]),e._v(" "),n("h2",{attrs:{id:"troubleshooting"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#troubleshooting"}},[e._v("#")]),e._v(" Troubleshooting")]),e._v(" "),n("p",[e._v("So your ipfs file transfer appears to not be working. The primary reason this"),n("br"),e._v("\nhappens is because node B cannot figure out how to connect to node A, or node B"),n("br"),e._v("\ndoesn't even know it has to connect to node A.")]),e._v(" "),n("h3",{attrs:{id:"checking-for-existing-connections"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#checking-for-existing-connections"}},[e._v("#")]),e._v(" Checking for existing connections")]),e._v(" "),n("p",[e._v("The first thing to do is to double check that both nodes are in fact running"),n("br"),e._v("\nand online. To do this, run "),n("code",[e._v("ipfs id")]),e._v(" on each machine. If both nodes show some"),n("br"),e._v("\naddresses (like the example below), then your nodes are online.")]),e._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"ID"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"QmTNwsFkLAed15kQEC1ZJWPfoNbBQnMFojfJKQ9sZj1dk8"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"PublicKey"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"CAASpgIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDZb6znj3LQZKP1+X81exf+vbnqNCMtHjZ5RKTCm7Fytnfe+AI1fhs9YbZdkgFkM1HLxmIOLQj2bMXPIGxUM+EnewN8tWurx4B3+lR/LWNwNYcCFL+jF2ltc6SE6BC8kMLEZd4zidOLPZ8lIRpd0x3qmsjhGefuRwrKeKlR4tQ3C76ziOms47uLdiVVkl5LyJ5+mn4rXOjNKt/oy2O4m1St7X7/yNt8qQgYsPfe/hCOywxCEIHEkqmil+vn7bu4RpAtsUzCcBDoLUIWuU3i6qfytD05hP8Clo+at+l//ctjMxylf3IQ5qyP+yfvazk+WHcsB0tWueEmiU5P2nfUUIR3AgMBAAE="')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"Addresses"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/ip4/127.0.0.1/tcp/4001/p2p/QmTNwsFkLAed15kQEC1ZJWPfoNbBQnMFojfJKQ9sZj1dk8"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/ip4/127.0.0.1/udp/4001/quic/p2p/QmTNwsFkLAed15kQEC1ZJWPfoNbBQnMFojfJKQ9sZj1dk8"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/ip4/192.168.2.131/tcp/4001/p2p/QmTNwsFkLAed15kQEC1ZJWPfoNbBQnMFojfJKQ9sZj1dk8"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/ip4/192.168.2.131/udp/4001/quic/p2p/QmTNwsFkLAed15kQEC1ZJWPfoNbBQnMFojfJKQ9sZj1dk8"')]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"AgentVersion"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"go-ipfs/0.4.11-dev/"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"ProtocolVersion"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"ipfs/0.1.0"')]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),n("p",[e._v("Next, check to see if the nodes have a connection to each other. You can do this"),n("br"),e._v("\nby running "),n("code",[e._v("ipfs swarm peers")]),e._v(" on one node, and checking for the other nodes"),n("br"),e._v("\npeer ID in the output. If the two nodes "),n("em",[e._v("are")]),e._v(" connected, and the "),n("code",[e._v("ipfs get")]),n("br"),e._v("\ncommand is still hanging, then something unexpected is going on, and I"),n("br"),e._v("\nrecommend filing an issue about it. If they are not connected, then let's try"),n("br"),e._v("\nand debug why. (Note: you can skip to 'Manually connecting node A to node B' if"),n("br"),e._v("\nyou just want things to work. Going through the debugging process and reporting"),n("br"),e._v("\nwhat happened to the ipfs team on IRC is helpful to us to understand common"),n("br"),e._v("\npitfalls that people run into)")]),e._v(" "),n("h3",{attrs:{id:"checking-providers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#checking-providers"}},[e._v("#")]),e._v(" Checking providers")]),e._v(" "),n("p",[e._v("When requesting content on ipfs, nodes search the DHT for 'provider records' to"),n("br"),e._v("\nsee who has what content. Let's manually do that on node B to make sure that"),n("br"),e._v("\nnode B is able to determine that node A has the data. Run "),n("code",[e._v("ipfs dht findprovs <hash>")]),e._v(". We expect to see the peer ID of node A printed out. If this command"),n("br"),e._v("\nreturns nothing (or returns IDs that are not node A), then no record of A"),n("br"),e._v("\nhaving the data exists on the network. This can happen if the data is added"),n("br"),e._v("\nwhile node A does not have a daemon running. If this happens, you can run "),n("code",[e._v("ipfs dht provide <hash>")]),e._v(" on node A to announce to the network that you have that"),n("br"),e._v("\nhash. Then if you restart the "),n("code",[e._v("ipfs get")]),e._v(" command, node B should now be able"),n("br"),e._v("\nto tell that node A has the content it wants. If node A's peer ID showed up in"),n("br"),e._v("\nthe initial "),n("code",[e._v("findprovs")]),e._v(" call, or manually providing the hash didn't resolve the"),n("br"),e._v("\nproblem, then it's likely that node B is unable to make a connection to node A.")]),e._v(" "),n("h3",{attrs:{id:"checking-addresses"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#checking-addresses"}},[e._v("#")]),e._v(" Checking addresses")]),e._v(" "),n("p",[e._v("In the case where node B simply cannot form a connection to node A, despite"),n("br"),e._v("\nknowing that it needs to, the likely culprit is a bad NAT. When node B learns"),n("br"),e._v("\nthat it needs to connect to node A, it checks the DHT for addresses for node A,"),n("br"),e._v("\nand then starts trying to connect to them. We can check those addresses by"),n("br"),e._v("\nrunning "),n("code",[e._v("ipfs dht findpeer <node A peerID>")]),e._v(" on node B. This command should"),n("br"),e._v("\nreturn a list of addresses for node A. If it doesn't return any addresses, then"),n("br"),e._v("\nyou should try running the manual providing command from the previous steps."),n("br"),e._v("\nExample output of addresses might look something like this:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/ip4/127.0.0.1/tcp/4001\n/ip4/127.0.0.1/udp/4001/quic\n/ip4/192.168.2.133/tcp/4001\n/ip4/192.168.2.133/udp/4001/quic\n/ip4/88.157.217.196/tcp/63674\n/ip4/88.157.217.196/udp/63674/quic\n")])])]),n("p",[e._v("In this case, we can see a localhost (127.0.0.1) address, a LAN address (the"),n("br"),e._v("\n192.168."),n("em",[e._v(".")]),e._v(" one) and another address. If this third address matches your"),n("br"),e._v("\nexternal IP, then the network knows a valid external address for your node. At"),n("br"),e._v("\nthis point, its safe to assume that your node has a difficult to traverse NAT"),n("br"),e._v("\nsituation. If this is the case, you can try to enable UPnP or NAT-PMP on the"),n("br"),e._v("\nrouter of node A and retry the process. Otherwise, you can try manually"),n("br"),e._v("\nconnecting node A to node B.")]),e._v(" "),n("h3",{attrs:{id:"manually-connecting-node-a-to-b"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#manually-connecting-node-a-to-b"}},[e._v("#")]),e._v(" Manually connecting node A to B")]),e._v(" "),n("p",[e._v("On node B run "),n("code",[e._v("ipfs id")]),e._v(" and take one of the multiaddrs that contains its public"),n("br"),e._v("\nip address, and then on node A run "),n("code",[e._v("ipfs swarm connect <multiaddr>")]),e._v(". You can"),n("br"),e._v("\nalso try using a relayed connection, for more information "),n("RouterLink",{attrs:{to:"/how-to/experimental-features/#circuit-relay"}},[e._v("read this"),n("br"),e._v("\ndoc")]),e._v(". If that "),n("em",[e._v("still")]),e._v(" doesn't work,"),n("br"),e._v("\nthen you should either join IRC and ask for help there, or file an issue on"),n("br"),e._v("\ngithub.")],1),e._v(" "),n("p",[e._v("If this manual step "),n("em",[e._v("did")]),e._v(" work, then you likely have an issue with NAT"),n("br"),e._v("\ntraversal, and ipfs cannot figure out how to make it through. Please report"),n("br"),e._v("\nsituations like this to us so we can work on fixing them.")])])}),[],!1,null,null,null);t.default=o.exports}}]);